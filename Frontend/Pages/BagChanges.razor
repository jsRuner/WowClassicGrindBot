@inject IJSRuntime JSRuntime
@inject IAddonReader addonReader

@implements IDisposable

@if (NewItems.Count() > 0)
{
    <div class="card">
        <div class="card-header">
            Bag Changes
            <div class="float-right">
                <Money Value="TotalMoneyChange" />
            </div>
        </div>
        <div class="card-body">
            @foreach (var bagItem in NewItems)
            {
                <div class="animate__animated animate__backInUp">
                    <BagItemComponent BagItem="bagItem" ShowChangesPrice="true" />
                    <hr style="margin:2px" />
                </div>
            }
        </div>
    </div>
}
@code {

    private const int MaxItemToShow = 14;
    private const int MaxLifeTimeSec = 15;

    private Timer timer = null!;

    private IEnumerable<BagItem> NewItems { get; set; } = null!;

    private Currency TotalMoneyChange { get; set; } = Currency.Empty;

    protected override void OnInitialized()
    {
        NewItems = addonReader.BagReader.BagItems.Where(WasRecentlyUpdated);

        addonReader.BagReader.DataChanged += OnBagReaderDataChanged;

        timer = new Timer(TimerTick);
    }

    public void Dispose()
    {
        addonReader.BagReader.DataChanged -= OnBagReaderDataChanged;
        timer.Dispose();
    }

    private void TimerTick(object? sender)
    {
        base.InvokeAsync(StateHasChanged);

        CalculateNextTimerTick();
    }

    protected int ItemValue(BagItem item)
    {
        if (item.LastChange == 0)
        {
            return item.Item.SellPrice * item.Count;
        }
        return item.LastChange * item.Item.SellPrice;
    }

    private bool WasRecentlyUpdated(BagItem item) => (DateTime.UtcNow - item.LastUpdated).TotalSeconds < MaxLifeTimeSec;

    private DateTime ExpireTime(BagItem item) => item.LastUpdated.AddSeconds(MaxLifeTimeSec);

    public void OnBagReaderDataChanged()
    {
        NewItems = addonReader.BagReader.BagItems.Where(WasRecentlyUpdated);

        if (NewItems.Count() > MaxItemToShow)
        {
            NewItems = NewItems.Take(MaxItemToShow);
            int i = 0;
            foreach (var item in NewItems)
            {
                item.LastUpdated -= TimeSpan.FromSeconds(i / 4);
                i++;
            }
        }

        CalculateNextTimerTick();

        TotalMoneyChange = ItemPrice.ToSellPrice(NewItems.Sum(ItemValue));
        base.InvokeAsync(StateHasChanged);
    }

    private void CalculateNextTimerTick()
    {
        DateTime nextCall = DateTime.MaxValue;

        foreach (var item in NewItems)
        {
            DateTime expire = ExpireTime(item);
            if (expire < nextCall)
            {
                nextCall = expire;
            }
        }

        if (nextCall != DateTime.MaxValue)
            timer.Change(nextCall - DateTime.UtcNow, Timeout.InfiniteTimeSpan);
    }
}
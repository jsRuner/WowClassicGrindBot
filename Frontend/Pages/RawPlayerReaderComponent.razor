@using System.Reflection

@inject IBotController botController
@inject IAddonReader addonReader

@implements IDisposable

<div class="container">
    <div class="card">
        <div class="card-header">
            Raw PlayerReader
        </div>
        <div class="card-body" style="padding-bottom: 0">
            <table class="table table-bordered">
                @foreach (var property in GetPropertyValues(addonReader.PlayerReader))
                {
                    <tr>
                        <td>@(property.Name)</td>
                        <td>
                            <input value="@property.Value" class="form-control" Disabled="true" />
                        </td>
                    </tr>
                }
            </table>
            <table class="table table-bordered">
                @foreach (var property in GetPropertyValues(addonReader))
                {
                    <tr>
                        <td>@(property.Name)</td>
                        <td>
                            <input value="@property.Value" class="form-control" Disabled="true" />
                        </td>
                    </tr>
                }
            </table>
        </div>
    </div>
</div>

@code {

    protected override void OnInitialized()
    {
        addonReader.AddonDataChanged += OnAddonDataChanged;
    }

    public void Dispose()
    {
        addonReader.AddonDataChanged -= OnAddonDataChanged;
    }

    private void OnAddonDataChanged()
    {
        base.InvokeAsync(StateHasChanged);
    }


    public class ObjectField
    {
        public string Name { get; init; } = string.Empty;
        public string Value { get; init; } = string.Empty;
    }

    static List<ObjectField> GetPropertyValues(object obj)
    {
        List<ObjectField> propList = new List<ObjectField>();
        string objName = obj.ToString() ?? "";
        if (objName.Length > 0) objName += ".";

        foreach (var pinfo in obj.GetType().GetProperties())
        {
            if (pinfo.GetIndexParameters().Length != 0) return propList;

            var value = pinfo.GetValue(obj, null);
            if (value == null) continue;

            if (pinfo.PropertyType.IsArray)
            {
                var arr = value as object[];
                if (arr == null) continue;
                for (var i = 0; i < arr.Length; i++)
                {
                    if (arr[i] != null && arr[i].GetType().IsPrimitive)
                    {
                        propList.Add(new ObjectField() { Name = objName + pinfo.Name + i.ToString(), Value = arr[i].ToString() ?? "" });
                    }
                    else
                    {
                        var lst = GetPropertyValues(arr[i]);
                        if (lst != null && lst.Count > 0)
                            propList.AddRange(lst);
                    }
                }
            }
            else if (pinfo.PropertyType.IsGenericType)
            {
                if (value.GetType() == typeof(HashSet<int>))
                {
                    var collection = value as HashSet<int>;
                    if (collection == null) continue;

                    int i = 0;
                    foreach (var item in collection)
                    {
                        propList.Add(new ObjectField() { Name = "    " + objName + pinfo.Name + $"[{i}]", Value = item.ToString() ?? "" });
                        i++;
                    }
                }
            }
            else
            {
                if (pinfo.PropertyType.IsPrimitive || pinfo.PropertyType.IsEnum || value.GetType() == typeof(string))
                {
                    propList.Add(new ObjectField() { Name = objName + pinfo.Name, Value = value.ToString() ?? "" });
                }
                else if (value is RecordInt recordInt)
                {
                    propList.Add(new ObjectField() { Name = objName + pinfo.Name, Value = recordInt.Value.ToString() });
                }
                else if (value is AuraCount auraCount)
                {
                    propList.Add(new ObjectField() { Name = objName + pinfo.Name, Value = auraCount.ToString() });
                }
                else if (value is PlayerReader playerReader)
                {
                    var lst = GetFunctionValues(playerReader, typeof(int));
                    if (lst != null && lst.Count > 0)
                        propList.AddRange(lst);
                }
                else if (value is AddonBits addonBits)
                {
                    var lst = GetFunctionValues(addonBits, typeof(bool));
                    if (lst != null && lst.Count > 0)
                        propList.AddRange(lst);
                }
                else if (value is SpellInRange spellInRange)
                {
                    var lst = GetFunctionValues(spellInRange, typeof(bool));
                    if (lst != null && lst.Count > 0)
                        propList.AddRange(lst);
                }
                else if (value is BuffStatus buffStatus)
                {
                    var lst = GetFunctionValues(buffStatus, typeof(bool));
                    if (lst != null && lst.Count > 0)
                        propList.AddRange(lst);
                }
                else if (value is TargetDebuffStatus targetDebuffStatus)
                {
                    var lst = GetFunctionValues(targetDebuffStatus, typeof(bool));
                    if (lst != null && lst.Count > 0)
                        propList.AddRange(lst);
                }
                else if (value is CombatLog creatureHistory)
                {
                    var lst = GetPropertyValues(creatureHistory);
                    if (lst != null && lst.Count > 0)
                        propList.AddRange(lst);
                }
            }
        }
        return propList;
    }

    static List<ObjectField> GetFunctionValues(object obj, Type t)
    {
        List<ObjectField> propList = new List<ObjectField>();
        string objName = obj.ToString() ?? "";
        if (objName.Length > 0) objName += ".";

        foreach (var minfo in obj.GetType().GetMethods(BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.Instance))
        {
            if(minfo.ReturnType != t)
                continue;

            ParameterInfo[] parameters = minfo.GetParameters();
            if (parameters.Length == 0)
            {
                propList.Add(new ObjectField() { Name = objName + minfo.Name, Value = minfo.Invoke(obj, null)!.ToString() ?? "" });
            }
        }

        return propList;
    }

}

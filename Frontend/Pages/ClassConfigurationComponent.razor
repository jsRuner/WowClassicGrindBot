@inject IBotController botController
@inject IAddonReader addonReader

@implements IDisposable

<div class="container">
    <div class="card">
        <div class="card-header">
            Class Configuration
        </div>
        <div class="card-body" style="padding-bottom: 0">
            <table class="table table-bordered">
                @foreach (var property in classConfig.GetType().GetProperties())
                {
                    <tr>
                        @switch (Type.GetTypeCode(property.PropertyType))
                        {
                            case TypeCode.String:
                                <td>@(property.Name)</td>
                                <td>
                                    <input value="@property.GetValue(classConfig)" class="form-control" disabled="@(!editables.Contains(property.Name))"
                               @onchange="c => { property.SetValue(classConfig, c.Value); Update(); }" />
                                </td>
                                break;

                            case TypeCode.Int32:
                                <td>@(property.Name)</td>
                                <td>
                                    <input value="@property.GetValue(classConfig)" class="form-control" disabled="@(!editables.Contains(property.Name))"
                               @onchange="c => { if(int.TryParse(c.Value?.ToString(), out int n)) { property.SetValue(classConfig, n); Update(); } }" />
                                </td>
                                break;
                            case TypeCode.Boolean:
                                <td>@(property.Name)</td>
                                <td>
                                    <input type="checkbox" class="form-control" disabled="@(!editables.Contains(property.Name))"
                               checked="@(CBool(property.GetValue(classConfig)))"
                               @onchange="c => { property.SetValue(classConfig, c.Value); Update(); }" />
                                </td>
                                break;
                            default:
                                <!--<input Text="@value?.ToString()" Disabled="true" />-->
                                break;
                        }
                    </tr>
                }
            </table>
        </div>
    </div>
</div>

@code {

    private ClassConfiguration classConfig = null!;

    private HashSet<string> editables = null!;

    protected override void OnInitialized()
    {
        RefreshData();

        editables = new()
        {
            // Int
            nameof(classConfig.NPCMaxLevels_Above),
            nameof(classConfig.NPCMaxLevels_Below),
            // booleans
            nameof(classConfig.Skin),
            nameof(classConfig.Mine),
            nameof(classConfig.Herb),
            nameof(classConfig.Salvage),
            nameof(classConfig.Loot),
            nameof(classConfig.UseMount),
            nameof(classConfig.KeyboardOnly),
            nameof(classConfig.AllowPvP),
            nameof(classConfig.AutoPetAttack),
            nameof(classConfig.PathThereAndBack),
            nameof(classConfig.PathReduceSteps),
            nameof(classConfig.CheckTargetGivesExp),
        };

        botController.ProfileLoaded += OnProfileLoaded;
        addonReader.AddonDataChanged += OnAddonDataChanged;
    }

    public void Dispose()
    {
        addonReader.AddonDataChanged -= OnAddonDataChanged;
        botController.ProfileLoaded -= OnProfileLoaded;
    }

    private void OnAddonDataChanged()
    {
        base.InvokeAsync(StateHasChanged);
    }

    public void OnGet()
    {
        RefreshData();
    }

    private void OnProfileLoaded()
    {
        RefreshData();
    }

    private void RefreshData()
    {
        classConfig = botController.ClassConfig!;
    }

    private void Update()
    {
        botController.OverrideClassConfig(classConfig);
    }

    private bool CBool(object? o)
    {
        bool? b = (bool?)o;
        return b.HasValue && b.Value;
    }
}

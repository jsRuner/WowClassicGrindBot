@using System.Linq
@using Serilog.Events

@inject LoggerSink sink

<style>
    .log {
        font-family: Consolas, monaco, monospace;
        font-size: small;
        padding: 0 0 5px 0 !important;
        padding-right: 5px !important;
    }

    .success {
        color: #28a745;
    }

    .info {
        color: #17a2b8;
    }

    .warning {
        color: #ffc107;
    }

    .danger {
        color: #dc3545;
    }

    .light {
        color: #f8f9fa;
    }
</style>

<div class="col-sm" style="@(MaxHeight > 0 ? $"overflow: auto; max-height: {MaxHeight}px;" : string.Empty)">
    <table class="table table-borderless table-dark" cellspacing="20">
        @{
            int head = Math.Max(sink.Head - 1, 0);
        }
        @for (int i = LoggerSink.SIZE; i >= 0; i--)
        {
            var evt = sink.Log[(head + i) % LoggerSink.SIZE];
            if (evt == null) continue;
            <tr class="@logLevelColor[(int)evt.Level]">
                <td class="log">@evt.Timestamp.ToString("HH:mm:ss")</td>
                <td class="log">@evt.RenderMessage()</td>
            </tr>
        }
    </table>
</div>

@code {
    [Parameter]
    public int MaxHeight { get; set; } = 400;

    private static readonly string[] logLevelColor = {
        string.Empty,   // LogEventLevel.Verbose
        "success",      // LogEventLevel.Debug
        string.Empty,   // LogEventLevel.Information
        "warning",      // LogEventLevel.Warning
        "danger",       // LogEventLevel.Error
        "danger"        // LogEventLevel.Fatal
    };

    protected override void OnInitialized()
    {
        sink.OnLogChanged += LogChanged;
    }

    public void Dispose()
    {
        sink.OnLogChanged -= LogChanged;
    }

    private void LogChanged()
    {
        base.InvokeAsync(StateHasChanged);
    }
}
@using PPather.Graph
@using SharedLib.Data

@inject IJSRuntime jsRuntime

<span class="form-inline">

    <!-- Continent Combo -->
    <label>Continent:</label>
    <select disabled="@IsDisabled" class="form-control" @bind="MapId">
        @foreach (var kvp in ContinentDB.IdToName)
        {
            <option value="@kvp.Key">@kvp.Value</option>
        }
    </select>

    <!-- From Combo -->
    <label style="margin-left: 10px">From:</label>
    <select disabled="@IsDisabled" class="form-control" @bind="From">
        <option value=""></option>
        @foreach (var location in locations.Where(l => l.Location.W == MapId))
        {
            <option value="@location.Description">@location.Description</option>
        }
    </select>

    <!-- To Combo -->
    <label style="margin-left: 10px">To:</label>
    <select disabled="@IsDisabled" class="form-control" @bind="To">
        <option value=""></option>
        @foreach (var location in locations.Where(l => l.Location.W == MapId))
        {
            <option value="@location.Description">@location.Description</option>
        }
    </select>

    <!-- Search Type Combo -->
    <label style="margin-left: 10px">Search:</label>
    <select disabled="@IsDisabled" class="form-control" @bind="SearchType">
        <option value="0">Original</option>
        <option value="1">A*</option>
        <option value="2">A* avoid models</option>
    </select>

    <!-- Search Button -->
    <button style="margin-left: 10px" type="button" disabled="@IsDisabled" class="form-control btn btn-primary" @onclick="Search">
        @if (IsDisabled)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
        }
        Search
    </button>
</span>

@code {

    [Parameter]
    public EventCallback<SearchParam> OnSearch { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; }

    float MapId { get; set; }
    string From { get; set; } = "Durotar, Orgrimmar gates";
    string To { get; set; }
    int SearchType { get; set; }

    public async Task Search()
    {
        string error = string.Empty;
        if (string.IsNullOrEmpty(From)) { error += "From is required. "; }
        if (string.IsNullOrEmpty(To)) { error += "To is required. "; }

        if (!string.IsNullOrEmpty(error))
        {
            await jsRuntime.InvokeAsync<object>("showAlert", error);
            return;
        }

        var searchParameters = new SearchParam
            {
                From = locations.Where(l => l.Description == this.From).FirstOrDefault(),
                To = locations.Where(l => l.Description == this.To).FirstOrDefault(),
                SearchType = (PathGraph.eSearchScoreSpot)this.SearchType,
                Continent = ContinentDB.IdToName[this.MapId]
            };

        await OnSearch.InvokeAsync(searchParameters);

    }

    private static readonly float Kalimdor = ContinentDB.NameToId["Kalimdor"];
    private static readonly float Expansion01 = ContinentDB.NameToId["Expansion01"];
    private static readonly float Azeroth = ContinentDB.NameToId["Azeroth"];
    //private static readonly float Northrend = ContinentDB.NameToId["Northrend"];

    readonly List<SearchLocation> locations = new()
    {
        new(-7899, -3563, 50, Kalimdor, "Tanaris"),
        new(-7200, -3770, 8, Kalimdor, "Krinkle Goodsteel"),
        new(-1863, 5419, -10, Expansion01, "Shattrath"),
        new(-2623, 4445, 36, Expansion01, "Terrokar,Stonebreaker Hold"),
        new(-2712, 3743, -2, Expansion01, "Terrokar,Grind spot"),
        new(-3561.1f, 639.1f, 3.1f, Expansion01, "Shadowmoon Valley"),

        new(-7217,907,-3, Kalimdor, "Silithus, The calling"),
        new(-6861,754,40, Kalimdor, "Silithus, Repair"),

        new(-8264,-2689,134, Azeroth, "Burning Steppes, Flight path"),
        new(-7558,-2167,154, Azeroth, "Burning Steppes, Ragged John"),

        new(-6236,134,428, Azeroth, "Dun morogh, Cold ridge valley"),
        new(-5880,-116,362, Azeroth, "Dun morogh, Cold ridge pass"),

        new(1381, -4368, 26, Kalimdor, "Durotar, Orgrimmar gates"),
        new(-896, -3770, 11, Kalimdor, "Barrens,Rachet"),
        new(-441, -2596, 96, Kalimdor, "Barrens,Crossroads,Barrens"),
        new(-2380, -1882, 95, Kalimdor, "Barrens,Camp Taurajo,Barrens"),
        new(965, 1040, 104, Kalimdor, "Stone talon,Sun Rock Retreat"),
        new(-1718, 3198, 4, Kalimdor, "Desolace,Shadowprey village"),

        new(2750, -3907, 91, Kalimdor, "Azshara,Alliance flight point"),
        new(2565, -6380, 108.701f, Kalimdor, "Azshara,Manor"),
        new(2537, -6672, 104.5f, Kalimdor, "Azshara,Manor 2"),

        // No data yet
        //new(5565, 5757, -75, Northrend, "Sholazar,Nesingwary Base"),
        //new(6033, 5520, -77, Northrend, "Sholazar,Spot 1"),
        //new(5649, 5956, -47, Northrend, "Sholazar,Spot 2"),
        //new(5241, 5922, -60, Northrend, "Sholazar,Spot 3"),
        //new(5194, 5709, -85, Northrend, "Sholazar,Spot 4"),
    };
}

@page "/Watch"

@using static System.Text.Json.JsonSerializer

@inject IJSRuntime jsRuntime
@inject PPatherService pPatherService
@inject PathingAPILoggerSink loggerSink
@inject JsonSerializerOptions options

@implements IAsyncDisposable


<div style="position: relative; z-index: 2; left: 0px; padding-left:10px; height:30px; background-color: black;color:white">
    <div id="canvasText" style="display:inline-block; float: left">
        ...
    </div>
    <div style="display:inline-block; float: right">
        <button @onclick="() => ToggleLayer(TriangleType.Model)">
            <span>Model</span>
        </button>
        <button @onclick="() => ToggleLayer(TriangleType.Object)">
            <span>Object</span>
        </button>
        <button @onclick="() => ToggleLayer(TriangleType.Water)">
            <span>Water</span>
        </button>
        <button @onclick="() => ToggleLayer(TriangleType.Terrain)">
            <span>Terrain</span>
        </button>
        <button @onclick="ToggleWireFrame">
            <span>Wire</span>
        </button>
        <button @onclick="() => LoadGeometry = !LoadGeometry">
            <span>@(LoadGeometry ? "Hide3D" : "Show3D")</span>
        </button>
        <button @onclick="async () => await Reset()">
            <span>Reset</span>
        </button>
    </div>
</div>
<canvas id="renderCanvas" style="background:black">
</canvas>
@code {

    public enum Color
    {
        Red = 1,
        Green,
        Blue,
        Teal,
        White,
        Orange,
        Yellow
    }

    [Parameter]
    public int PathColour { get; set; } = (int)Color.Red;

    [Parameter]
    public string Name { get; set; } = "path";

    [Parameter]
    public bool ClearPath { get; set; } = true;

    private bool firstRender = false;

    private Thread thread;
    private CancellationTokenSource searchCts;

    private Queue<ChunkEventArgs> chunkEventArgs = new();

    private bool LoadGeometry { get; set; } = true;

    private Vector4 lastFrom;
    private Vector4 lastTo;
    private Vector3 lastClosest;
    private Vector3 lastPeek;

    private Vector3[] testPoints;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        this.firstRender = true;

        await jsRuntime.InvokeVoidAsync("log", Token,
            "Waiting for first search from the API...");

        await jsRuntime.InvokeVoidAsync("createScene", Token);

        loggerSink.OnLog += OnLog;

        pPatherService.OnChunkAdded += OnChunkAdded;
        pPatherService.OnPathCreated += OnDrawFinalPath;

        pPatherService.OnLinesAdded += OnDrawlines;
        pPatherService.OnSphereAdded += OnDrawSphere;
        pPatherService.SearchBegin += OnSearchBegin;
    }

    public async ValueTask DisposeAsync()
    {
        if (!firstRender) return;

        loggerSink.OnLog -= OnLog;

        pPatherService.SearchBegin -= OnSearchBegin;
        pPatherService.OnChunkAdded -= OnChunkAdded;
        pPatherService.OnPathCreated -= OnDrawFinalPath;
        pPatherService.OnLinesAdded -= OnDrawlines;
        pPatherService.OnSphereAdded -= OnDrawSphere;

        await Reset();

        base.Dispose();
    }

    private async void ToggleLayer(TriangleType layer)
    {
        await jsRuntime.InvokeVoidAsync("toggleLayer", Token, layer);
    }

    private async void ToggleWireFrame()
    {
        await jsRuntime.InvokeVoidAsync("toggleWireFrame", Token);
    }

    private async ValueTask Reset()
    {
        searchCts?.Cancel();

        await jsRuntime.InvokeVoidAsync("clear", Token);

        pPatherService.Reset();
        GC.Collect();
    }

    public void OnLog(LogEvent logEvent)
    {
        Log(logEvent.RenderMessage());
    }

    private async void Log(string message)
    {
        await jsRuntime.InvokeVoidAsync("log", Token, message);
    }

    private async void SearchPath_Thread()
    {
        while (!searchCts.IsCancellationRequested &&
            !Token.IsCancellationRequested)
        {
            var spots = pPatherService.GetCurrentSearchPath();
            if (spots != null)
            {
                var path = spots.Where(s => s != null).Select(s => s.Loc);
                if (path.Count() > 0)
                {
                    await jsRuntime.InvokeVoidAsync("drawPath", Token,
                        Serialize(path, options), Color.White, "search");
                }
            }

            if (lastFrom != pPatherService.SearchFrom)
            {
                lastFrom = pPatherService.SearchFrom;
                await jsRuntime.InvokeVoidAsync("drawLine", Token,
                    Serialize(lastFrom.AsVector3(), options), Color.Green, "start2");
            }

            if (lastTo != pPatherService.SearchTo)
            {
                lastTo = pPatherService.SearchTo;
                await jsRuntime.InvokeVoidAsync("drawLine", Token,
                    Serialize(lastTo.AsVector3(), options), Color.Blue, "endd");
            }

            if (lastClosest != pPatherService.ClosestLocation)
            {
                lastClosest = pPatherService.ClosestLocation;
                await jsRuntime.InvokeVoidAsync("drawLine", Token,
                    Serialize(pPatherService.ClosestLocation, options), Color.Teal, "closest");
            }

            if (testPoints != pPatherService.TestPoints)
            {
                testPoints = pPatherService.TestPoints;

                for (int i = 0; i < testPoints.Length; i++)
                {
                    Vector3 p = testPoints[i];
                    await jsRuntime.InvokeVoidAsync("drawLineDebug", Token,
                        Serialize(p, options), Color.Yellow, "debug" + i, testPoints.Length);
                }
            }

            if (lastPeek != pPatherService.PeekLocation)
            {
                lastPeek = pPatherService.PeekLocation;

                await jsRuntime.InvokeVoidAsync("drawLine", Token,
                    Serialize(pPatherService.PeekLocation, options), Color.Orange, "peek");
            }

            searchCts.Token.WaitHandle.WaitOne(100);
        }
    }


    private void OnSearchBegin()
    {
        searchCts = new();
        thread = new Thread(SearchPath_Thread);
        thread.Start();
    }

    private async void OnDrawFinalPath(Path spotPath)
    {
        if (spotPath != null)
        {
            while (chunkEventArgs.TryDequeue(out var e))
            {
                if (LoadGeometry)
                    await DequeueChunkEvent(e);
            }

            if (ClearPath)
                await jsRuntime.InvokeVoidAsync("removeMeshes", Token, Name);

            await jsRuntime.InvokeVoidAsync("drawPath", Token,
                Serialize(spotPath.locations, options), PathColour, Name);

            await jsRuntime.InvokeVoidAsync("removeMeshes", Token, "search");
        }
        else
        {
            while (chunkEventArgs.TryDequeue(out var e))
            {
                await DequeueChunkEvent(e);
            }
            Log("No path found");
        }

        searchCts?.Cancel();
    }

    private async void OnDrawSphere(SphereEventArgs e)
    {
        await jsRuntime.InvokeVoidAsync("drawSphere", Token,
            Serialize(e.Location, options), e.Colour, e.Name);
    }

    private async void OnDrawlines(LinesEventArgs e)
    {
        await jsRuntime.InvokeVoidAsync("removeMeshes", Token, e.Name);

        await jsRuntime.InvokeVoidAsync("drawPath", Token,
            Serialize(e.Locations, options), e.Colour, e.Name);
    }

    private /*async*/ void OnChunkAdded(ChunkEventArgs e)
    {
        chunkEventArgs.Enqueue(e);
        //_ = DequeueChunkEvent(e);
    }

    private async ValueTask DequeueChunkEvent(ChunkEventArgs e)
    {
        if (Token.IsCancellationRequested) return;

        TriangleCollection chunks = pPatherService.GetChunkAt(e.GridX, e.GridY);

        int i = 0;
        int[][] models = new int[4][];
        models[i++] = MeshFactory.CreateTriangles(TriangleType.Terrain, chunks);
        models[i++] = MeshFactory.CreateTriangles(TriangleType.Water, chunks);
        models[i++] = MeshFactory.CreateTriangles(TriangleType.Object, chunks);
        models[i++] = MeshFactory.CreateTriangles(TriangleType.Model, chunks);

        var positions = MeshFactory.CreatePoints(chunks);

        await jsRuntime.InvokeVoidAsync("addModels", Token,
            Serialize(models, options),
            Serialize(positions, options));
    }
}